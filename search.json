[{"title":"鼎捷ERP笔记","path":"/2025/02/06/鼎捷ERP 笔记/","content":"鼎捷ERP笔记r.razzi900新增程序azzi910 新增作业 规格下载规格 迁出程序和规格 (未迁出程序无法上传)复制程序 adzp270下载规格 打开规格(档案 开启档案)上传规格 检查复制过程中的错误下载程序 上传程序 r.t 打开表格设计器 迁出表格 (修改扩展字段名) 执行异动r.q打开开窗设计器开窗识别码 c客制 q标准 cp_字段编辑 说明F双击新增栏位测试开窗 回到规格设置器修高查询时开窗以及comment 上传规格下载程序 上传程度r.v校验带值 cv开头 新增修改表格要异动表格画面生成器 按钮 增加edit空间 修改table代号和字段代号控件代号 表格名.字段名comment后面改成字段名 表头数组命名 g_表格名_m表体 g_表格名_d 接口 azzi700服务规格编号cwssp开头(程序名称)三位流水号接口名称 (ws服务名称)服务类别下载程序 用服务规格编号搜索 在程序开始位置写import util 接口传输以数组形式 json转成数组创建数组 r.d 作业号 操作页面即可debug联络识别码有位数要求 aooi130 建立用户编号azzi800 用户用户资料azzi850 维护角色组资料 azzi920 报错信息编号维护 azzi500 企业编号维护作业 集成接口开发（接收） azzi700注册作业 T100设计器签出和下载程序 T100设计器撰写代码后上传程序 接口测试 集成接口作业开发（推送） azzi901注册推送接口子程序 （规格编号命名规则 cs_fy_send_第三方系统简称） T100设计器签出程序 T100设计器下载程序 Debug watch 用法 （CTRL+D打开） 已知报错信息码 r.d+ 作业号 ctrl+d watch g_errparam.code if g_errparam.code&#x3D;’报错信息码’ T100设计器使用规范首次使用 建立连线方式，站点就是应用服务器的地址，登入区域默认1正式区（有些企业开发人员规定只能在测试区开发，那就填2），账号和密码由公司分配，如果没有就用tiptop ，密码默认也是，工作目录建议放到别的目录，不能带中文 更新基础资料，进阶功能&gt;更新基础数据，等到进度条跑完，提示基础数据完成之后，就完成了设计器的配置了 下载规格和程序，规格就是之前的画面档，在T100叫做规格设计器引入了一个签入签出的概念，程序允许自由下载查看，但是如果要想要修改后上传到服务器，程序必须先签出，如果其他人签出了，则只能等别人签入后，你再进行签出，这个设计的本意是，防止大家调整共同的代码，造成功能混乱，是个很不错的理念，但是如果共用账号的话，比如大家都是用顶呱呱开发的，那就没有意义了因为签出之后，大家都可以进行规格代码上传 设计器使用步骤（以axmt500需要新增一个动作为例）： 规格&gt;下载规格（版本控制）&gt; adzp050&gt;搜索axmt500，签出&gt;下载 程序&gt;下载程序（版本控制）&gt; adzp050&gt;搜索axmt500，签出&gt;下载 同时签出规格和程序，防止其他工程师要调整这个程序，导致两边不同步 如果程序未签出，就会在上方，如果是已签出就会在下方，不管是否签出都可以下载，但是只有签出状态才允许修改代码进行上传（自动编译的） 开启规格档案，档案&gt;开启档案&gt;找到对应的路径，找到axmt500（c）中.tzs（T100的画面档不再是4FD，程序也不再是4GL）&gt;选中开启开启后出现的界面和以前的画面档是一样的，规格调整好之后保存，或者直接上传，会提示是否保存的 规格上传成功后，再重新下载一遍程序，这个就是T100的一个开发特点，代码会根据规格生成相应的代码（前提是section没有修改，也不建议修改） 什么是section？ ​ T100的规格和程序是相呼应的，设计器会根据规格生成标准的程序框架，这个框架是不能修改的，但是会在每个段落预留补充逻辑的地方 debug程序&gt;程序除错，效果等同于linux服务器连线上面的rd xxxx（T100的调试指令），界面和tiptop的调试是一样的 原则上T100设计器基本可以处理开发过程的的大部分调试开发问题，并不需要再去连线的Linux服务器的了 T100开发技巧新增字段 通过（azzi910 作业基本数据维护）作业名查找到规格和程序名称 然后签出，下载，上传程序和规格 r.t 打开表格设计器 迁出表格 (修改扩展字段名) 执行异动 在规格上添加对应字段、修改控件属性 上传程序和规格，如果程序没有解开框架不需要修改程序，如果解开了可以查找CONSTRUCT BY NAME，INPUT BY NAME，b_fill，update和insert语句 进行修改 重新打开作业即可看到效果 改变账套 TOPENT&#x3D;2 定义 DEFINE –定义一个变量（关键字DEFINE）写法1 直接定义类型DEFINE l_ac decimal(5,0) #整数DEFINE l_sql string #文本 写法2 参考数据库的原有数据类型 r.t (关键字LIKE)DEFINE l_ac LIKE type_t.num5 #整数DEFINE l_sql LIKE type_t.chr4000 #文本 –定义数据结构参考类型TYPE type_test RECORD #定义一个参考类型 num1 LIKE type_t.num5, num2 LIKE type_t.num5, num3 LIKE type_t.num5, dat1 LIKE type_t.dat, dat2 LIKE type_t.dat, chr1 LIKE type_t.chr100 END RECORD –定义一个一维数组(单行数据)DEFINE g_test type_test #根据type_test的结构定义一个一维数组 –定义一个二维数组(多行数据)DEFINE g_test1 DYNAMIC ARRAY OF type_test 注意：1.在一个函数内，一个变量只能定义一次，包括头文件和MAIN入口 2.变量使用前，尽量做个初始化，清空原值 3.尽量按照T100程序的变量命名规则去做变量定义，具体可以参考T100的程序 赋值 LET 赋值关键词：LET定义一个文本变量，并赋值为周杰伦：DEFINE l_name LIKE type_t.chr20LET l_name &#x3D; ‘周杰伦’ 定义一个数值变量，并赋值为888:DEFINE l_num LIKE type_t.num10LET l_num &#x3D; 888 另一种赋值的方式：INTO 从数据库取值获取100001料件的单位DEFINE l_imaa006 LIKE imaa_t.imaa006 SELECT imaa006 INTO l_imaa006 FROM imaa_t WHERE imaaent&#x3D;’企业号’ AND imaa001&#x3D; ‘100001’ 提示报错信息(弹框) 1234567INITIALIZE g_errparam TO NULL LET g_errparam.extend = &quot;警告：&quot; #错误信息的前缀LET g_errparam.code = &#x27;aap-00113&#x27; #错误信息代码，在常用工具-&gt;错误讯息维护作业中添加LET g_errparam.popup = FALSE #错误信息是否需要弹框（false不用，true则有）CALL cl_err()NEXT FIELD CURRENT 年龄限制 18~60 12345678910111213141516171819202122cl_null() 用于判断是否为空g_oozyuc_m.oozyuc004 获取表头变量azzi920 错误代码维护，&quot;coo-00666&quot; 是我自定义的错误编号#检查年龄必须 &gt;=18 并且 &lt;=60 IF NOT cl_null(g_oozyuc_m.oozyuc004) THEN IF g_oozyuc_m.oozyuc004 &lt; 18 OR g_oozyuc_m.oozyuc004 &gt; 60 THEN INITIALIZE g_errparam TO NULL LET g_errparam.extend = &quot;&quot; LET g_errparam.code = &quot;coo-00666&quot; LET g_errparam.popup = TRUE CALL cl_err() NEXT FIELD oozyuc004 END IF END IF 报错 代码段：INITIALIZE g_errparam TO NULL LET g_errparam.extend = &quot;&quot;LET g_errparam.code = &quot;coo-00666&quot; #azzi920维护错误码LET g_errparam.popup = TRUE CALL cl_err() 某字段刚开始可编辑修改的，怎么改程序变为不可修改，如果要修改就这张单子作废从源头开始修改 cl_set_comp_visible(“字段名称 “,FALSE) 数据库报错码 -236 sql前后字段数量不一致 -391 向非NULL字段插入NULL值了 -268 违反唯一约束约束名称 T100的报错语法杂记 12345678910111213141516171819202122232425261.1.一般用于编辑新增或者修改的时候，插入数据库段的检查，如果有报错信息，则会INSERT失败。*IF SQLCA.SQLCODE THEN INITIALIZE g_errparam TO NULL LET g_errparam.extend = &quot;wmbcuc_t:&quot;,SQLERRMESSAGE LET g_errparam.code = SQLCA.SQLCODE LET g_errparam.popup = TRUE CALL s_transaction_end(&#x27;N&#x27;,&#x27;0&#x27;) CALL cl_err() CANCEL INSERTELSE*1.2.一般用于栏位输入之后的值的检查，如果有误，则会给出提示并且光标停留在此栏位上*IF l_cntin &lt;= 0 THEN INITIALIZE g_errparam TO NULL LET g_errparam.extend = &quot;输入的车间编号不存在，请检查&quot; LET g_errparam.code = &quot;&quot; #也可以将g_errparam.extend=&quot;&quot;;.code的值在azzi920中维护 LET g_errparam.popup = TRUE CALL cl_err() NEXT FIELD CURRENTEND IF*1.3.使用message弹窗功能，这种方式本人使用的比较少\t上面的内容就是我个人总结的报错语法，报错的语法相对要简单一点，只是经常会用到，所以做个总结，方便以后查看。如有不正确的地方，还请指正，感谢！ 数组下标从1开始 从0开始会调试报错 通过作业编号查找对应的程序 azzi910 作业基本数据维护 点打印报错提示FRIP未在系统参数设置（azzs010）中建制正确信息 lib-0398 错误码 解决办法： azzs010—&gt; 可视化报表-&gt;可视化报表主机网址，例「http:&#x2F;&#x2F;报表主机IP:端口号」 填写帆软报表服务器的地址打开帆软设计器 服务器-&gt; 服务器报表平台管理 开发主程序 开发子程序 复制程序 数据表设计器 r.t 新建表资料 字段数据设计adzi150 开窗设计器r.q-&#x2F;adzi210 校验设计器r.v 画面产生器r.a（adzp168） 常用程序 复制程序与规格：adzp270 设计数据删除工具：adzp063 程序资料过单：adzi888 开发问题点收集 为什么不能新增报错信息 正式区\\测试区 怎么区分 企业编号和据点作用 封装好程序怎么看源代码 怎么开发一个接口和发送接口 这是开启了两个事务，这两个事务是包含关系还是独立关系 怎么通过快速查看整个页面的逻辑 具体到每个字段的逻辑，比如新增单据时经过了每个字段有哪些校验，删除时有哪些校验 为什么有些单据无法搜到规格 类似于g_user 全局变量有哪些 常用字符串解析成对象，对象转成字符串， 怎么调用页面审核接口 SQLCA.sqlcode 常见状态码 怎么主动调用另外一个系统的WebApi 以及web Service ，怎么设置当在页面上触发某个动作时自动调用某个API或者Webservice 大班课培训笔记 123CALL util.JSON.parse( js, cust_rec ) #从JS内把资料取入阵列LET js = util.JSON.stringify( cust_rec ) #从cust_rec 把资料写入JS ERP增加FR报表打印模板 新增程序 新增规格 生成画面 azzi900新增报表程序 azzi910 产生作业 同时签出规格和程序(不要下载) azzi901 注册子程序 签出子程序 报表组件设计器adzp188 复制规格和程序adzp270 作业挂载报表程序azzi988 FR 系统保留模板参数 title1：主标题(通常为公司名称)title2：副标题(通常为报表名称)pdate：制表日期date_fmt：日期格式user：制表人IDuser_name：制表人名称logo：公司Logo档名\u000bfr_sessionid：模板资料集参数使用 fr_timestamp：范本资料集参数使用 常用作业 azzi991 单据别参数维护作业 参数值 aooi200 单据别维护作业 针对某个作业配置参数 员工信息维护 aooi130 ooag_t 部门信息 维护 ooefl_t aoos020 营运据点参数设置"},{"title":"开发文档","path":"/2025/02/05/开发文档/","content":"开发文档Linux命令chmod 加所有权限 1chmod -R 777 文件名 .开头的文件是隐藏文件查看语言环境，修改语言环境为中文 12echo $LANGexport LANG=zh_CN.UTF-8 mkdir 递归创建文件夹 1mkdir -p 文件夹 touch 创建空文件 1touch 文件名 tree 查看文件夹的树形结构 1tree 文件夹 在文件中搜寻字符串 123grep &quot;2024&quot; *.loggrep -l &quot;2024&quot; *.log 只显示文件名 不显示所有符合条件的位置 一个文件夹可能会存在多个位置符合条件 git解决npm install安装出现packages are looking for funding run npm fund for details问题 1npm config set fund false --location=global 解决：git SSL certificate problem: unable to get local issuer certificate 1git config --global http.sslbackend schannel 解决 坑：ssh: connect to host github.com port 22: Connection refused 排查思路ssh: connect to host github.com port 22: Connection refused这个错误提示的是连接github.com的22端口被拒绝了。 原本以为http://github.com挂了，但是浏览器访问http://github.com一切正常。 网上搜索这个报错，发现很多人遇到这个问题，大概有2个原因和对应解决方案： 使用GitHub的443端口22端口可能被防火墙屏蔽了，可以尝试连接GitHub的443端口。 12345678910$ vim ~/.ssh/config```# Add section below to itHost github.com Hostname ssh.github.com Port 443```$ ssh -T git@github.comHi xxxxx! You&#x27;ve successfully authenticated, but GitHub does notprovide shell access. 这个解决方案的思路是：给~/.ssh/config文件里添加如下内容，这样ssh连接GitHub的时候就会使用443端口。 123Host github.com Hostname ssh.github.com Port 443 如果~/.ssh目录下没有config文件，新建一个即可。 修改完~/.ssh/config文件后，使用ssh -T git@github.com来测试和GitHub的网络通信是否正常，如果提示Hi xxxxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 就表示一切正常了。 但是，这个方案在我这里行不通，修改后还是提示ssh: connect to host github.com port 443: Connection refused。 这个方案有效的前提是：执行命令ssh -T -p 443 git@ssh.github.com后不再提示connection refused，所以要尝试这个方案的小伙伴先执行这条命令测试下。 使用https协议，不要使用ssh协议在你的GitHub的本地repo目录，执行如下命令： 1$ git config --local -e 然后把里面的url配置项从git格式 1url = git@github.com:username/repo.git 修改为https格式 1url = https://github.com/username/repo.git 这个其实修改的是repo根目录下的./git/config文件。 但是这个方法在我这里同样不生效。 解决方案网上的招都没用，只能自力更生了。既然和GitHub建立ssh连接的时候提示connection refused，那我们就详细看看建立ssh连接的过程中发生了什么，可以使用ssh -v命令，-v表示verbose，会打出详细日志。 12345678$ ssh -vT git@github.comOpenSSH_9.0p1, OpenSSL 1.1.1o 3 May 2022debug1: Reading configuration data /etc/ssh/ssh_configdebug1: Connecting to github.com [::1] port 22.debug1: connect to address ::1 port 22: Connection refuseddebug1: Connecting to github.com [127.0.0.1] port 22.debug1: connect to address 127.0.0.1 port 22: Connection refusedssh: connect to host github.com port 22: Connection refused 从上面的信息马上就发现了诡异的地方，连接http://github.com的地址居然是::1和127.0.0.1。前者是IPV6的localhost地址，后者是IPV4的localhost地址。 到这里问题就很明确了，是DNS解析出问题了，导致http://github.com域名被解析成了localhost的ip地址，就自然连不上GitHub了。 Windows下执行ipconfig /flushdns 清楚DNS缓存后也没用，最后修改hosts文件，增加一条github.com的域名映射搞定。 1140.82.113.4 github.com 查找http://github.com的ip地址可以使用https://dnschecker.org/来查询github.com在全球的ip地址，也可以通过 https://api.github.com/meta 查看github.com官方公布的IP地址 这个问题其实就是DNS解析被污染了，有2种可能： DNS解析被运营商劫持了 使用了科学上网工具 按照我上面写的解决方案操作即可解决。 最后大招如果你发现DNS解析并没有解析到127.0.0.1，但是执行ssh -vT git@github.com就是显示当前github.com解析的ip连接22端口和443端口失败，那就直接去https://dnschecker.org/或者https://api.github.com/meta找另外的可用ip。 然后修改自己电脑上的DNS解析host文件，把http://github.com解析到新的ip，然后再测试。 注册github账号失败提示 Unable to verify your captcha response. Please visit https://help.github.com/articles/troubleshooting-connectivity-problems/#troubleshooting-the-captcha for troubleshooting information. 用http://ipaddress.com查 http://octocaptcha.com的地址，在hosts里面补上后又操作了一遍flushdns 140.82.112.4 octocaptcha.com再访问 OctoCaptcha https://octocaptcha.com/ 回头到注册页面重新执行注册动作就会出现验证码 解决hexo d &#x2F; ssh 22端口超时方法 连接超时，首先找到git的安装目录，找到&#x2F;etc&#x2F;ssh&#x2F;ssh_config文件,使用记事本打开它。 把如下内容复制到ssh_config文件的末尾处：并记得保存。 重新尝试 hexo d或者 ssh -T &#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#x2e;&#x63;&#x6f;&#109; 参考链接解决-git连接github超时问题Connection timed out | 浅悦的编程时光 123456Host github.comUser gitHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443 hexo 部署后页面显示的内容为main分支而不是master 解决 选择博客所对应的仓库 ，然后选择上面一排选项卡中settings 然后把右边General选项卡中Default Branch 和Page选项卡中Build and deployment 下的branch都改成 master即可 受网络影响可能前面几次刷新看到的效果没有变化 可以多刷新几次试试 笔记源码管理建议使用 GitHub 仓库在前面的步骤中，我们还没有把源码放进仓库中保存，这样会很容易丢失。所以接下来我们再创建一个仓库，例如可以命名为 myblog-source 用来表示这个仓库存放的是源码，这个仓库建议选择为「Private」即私有仓库。 首先把这个仓库克隆到本地： 1git clone https://github.com/username/myblog-source 然后在此仓库中配置一下忽略文件： 12345.DS_Storenode_modulesdb.json.deploy_gitpublic 这些文件可以根据我们的源码生成，所以建议忽略它们，不让版本库追踪这些文件的变化。然后把我们的博客工程目录整个复制进来，或者在这里面重新创建一个，最终 myblog-source 仓库目录结构会是这样的： 12345678910111213myblog-source: - scaffolds: # 模版 - draft.md - page.md - post.md - source: _posts: # 这里面存放文章 - xxx.md - themes: ... - _config.yml # 配置文件 - package.json ... 然后把这些文件提交并推送到 GitHub 上就可以啦： 123git add --allgit commit -m &quot;update&quot;git push origin main"},{"title":"Hello World","path":"/2025/02/05/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]