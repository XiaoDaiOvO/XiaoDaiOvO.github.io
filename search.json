[{"title":"开发文档","path":"/2025/02/05/开发文档/","content":"开发文档Linux命令chmod 加所有权限 1chmod -R 777 文件名 .开头的文件是隐藏文件查看语言环境，修改语言环境为中文 12echo $LANGexport LANG=zh_CN.UTF-8 mkdir 递归创建文件夹 1mkdir -p 文件夹 touch 创建空文件 1touch 文件名 tree 查看文件夹的树形结构 1tree 文件夹 在文件中搜寻字符串 123grep &quot;2024&quot; *.loggrep -l &quot;2024&quot; *.log 只显示文件名 不显示所有符合条件的位置 一个文件夹可能会存在多个位置符合条件 git解决npm install安装出现packages are looking for funding run npm fund for details问题 1npm config set fund false --location=global 解决：git SSL certificate problem: unable to get local issuer certificate 1git config --global http.sslbackend schannel 解决 坑：ssh: connect to host github.com port 22: Connection refused 排查思路ssh: connect to host github.com port 22: Connection refused这个错误提示的是连接github.com的22端口被拒绝了。 原本以为http://github.com挂了，但是浏览器访问http://github.com一切正常。 网上搜索这个报错，发现很多人遇到这个问题，大概有2个原因和对应解决方案： 使用GitHub的443端口22端口可能被防火墙屏蔽了，可以尝试连接GitHub的443端口。 12345678910$ vim ~/.ssh/config```# Add section below to itHost github.com Hostname ssh.github.com Port 443```$ ssh -T git@github.comHi xxxxx! You&#x27;ve successfully authenticated, but GitHub does notprovide shell access. 这个解决方案的思路是：给~/.ssh/config文件里添加如下内容，这样ssh连接GitHub的时候就会使用443端口。 123Host github.com Hostname ssh.github.com Port 443 如果~/.ssh目录下没有config文件，新建一个即可。 修改完~/.ssh/config文件后，使用ssh -T git@github.com来测试和GitHub的网络通信是否正常，如果提示Hi xxxxx! You&#39;ve successfully authenticated, but GitHub does not provide shell access. 就表示一切正常了。 但是，这个方案在我这里行不通，修改后还是提示ssh: connect to host github.com port 443: Connection refused。 这个方案有效的前提是：执行命令ssh -T -p 443 git@ssh.github.com后不再提示connection refused，所以要尝试这个方案的小伙伴先执行这条命令测试下。 使用https协议，不要使用ssh协议在你的GitHub的本地repo目录，执行如下命令： 1$ git config --local -e 然后把里面的url配置项从git格式 1url = git@github.com:username/repo.git 修改为https格式 1url = https://github.com/username/repo.git 这个其实修改的是repo根目录下的./git/config文件。 但是这个方法在我这里同样不生效。 解决方案网上的招都没用，只能自力更生了。既然和GitHub建立ssh连接的时候提示connection refused，那我们就详细看看建立ssh连接的过程中发生了什么，可以使用ssh -v命令，-v表示verbose，会打出详细日志。 12345678$ ssh -vT git@github.comOpenSSH_9.0p1, OpenSSL 1.1.1o 3 May 2022debug1: Reading configuration data /etc/ssh/ssh_configdebug1: Connecting to github.com [::1] port 22.debug1: connect to address ::1 port 22: Connection refuseddebug1: Connecting to github.com [127.0.0.1] port 22.debug1: connect to address 127.0.0.1 port 22: Connection refusedssh: connect to host github.com port 22: Connection refused 从上面的信息马上就发现了诡异的地方，连接http://github.com的地址居然是::1和127.0.0.1。前者是IPV6的localhost地址，后者是IPV4的localhost地址。 到这里问题就很明确了，是DNS解析出问题了，导致http://github.com域名被解析成了localhost的ip地址，就自然连不上GitHub了。 Windows下执行ipconfig /flushdns 清楚DNS缓存后也没用，最后修改hosts文件，增加一条github.com的域名映射搞定。 1140.82.113.4 github.com 查找http://github.com的ip地址可以使用https://dnschecker.org/来查询github.com在全球的ip地址，也可以通过 https://api.github.com/meta 查看github.com官方公布的IP地址 这个问题其实就是DNS解析被污染了，有2种可能： DNS解析被运营商劫持了 使用了科学上网工具 按照我上面写的解决方案操作即可解决。 最后大招如果你发现DNS解析并没有解析到127.0.0.1，但是执行ssh -vT git@github.com就是显示当前github.com解析的ip连接22端口和443端口失败，那就直接去https://dnschecker.org/或者https://api.github.com/meta找另外的可用ip。 然后修改自己电脑上的DNS解析host文件，把http://github.com解析到新的ip，然后再测试。 注册github账号失败提示 Unable to verify your captcha response. Please visit https://help.github.com/articles/troubleshooting-connectivity-problems/#troubleshooting-the-captcha for troubleshooting information. 用http://ipaddress.com查 http://octocaptcha.com的地址，在hosts里面补上后又操作了一遍flushdns 140.82.112.4 octocaptcha.com再访问 OctoCaptcha https://octocaptcha.com/ 回头到注册页面重新执行注册动作就会出现验证码 解决hexo d &#x2F; ssh 22端口超时方法 连接超时，首先找到git的安装目录，找到&#x2F;etc&#x2F;ssh&#x2F;ssh_config文件,使用记事本打开它。 把如下内容复制到ssh_config文件的末尾处：并记得保存。 重新尝试 hexo d或者 ssh -T &#103;&#x69;&#x74;&#64;&#x67;&#105;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#x6d; 参考链接解决-git连接github超时问题Connection timed out | 浅悦的编程时光 123456Host github.comUser gitHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443 hexo 部署后页面显示的内容为main分支而不是master 解决 选择博客所对应的仓库 ，然后选择上面一排选项卡中settings 然后把右边General选项卡中Default Branch 和Page选项卡中Build and deployment 下的branch都改成 master即可 受网络影响可能前面几次刷新看到的效果没有变化 可以多刷新几次试试 笔记源码管理建议使用 GitHub 仓库在前面的步骤中，我们还没有把源码放进仓库中保存，这样会很容易丢失。所以接下来我们再创建一个仓库，例如可以命名为 myblog-source 用来表示这个仓库存放的是源码，这个仓库建议选择为「Private」即私有仓库。 首先把这个仓库克隆到本地： 1git clone https://github.com/username/myblog-source 然后在此仓库中配置一下忽略文件： 12345.DS_Storenode_modulesdb.json.deploy_gitpublic 这些文件可以根据我们的源码生成，所以建议忽略它们，不让版本库追踪这些文件的变化。然后把我们的博客工程目录整个复制进来，或者在这里面重新创建一个，最终 myblog-source 仓库目录结构会是这样的： 12345678910111213myblog-source: - scaffolds: # 模版 - draft.md - page.md - post.md - source: _posts: # 这里面存放文章 - xxx.md - themes: ... - _config.yml # 配置文件 - package.json ... 然后把这些文件提交并推送到 GitHub 上就可以啦： 123git add --allgit commit -m &quot;update&quot;git push origin main"},{"title":"Hello World","path":"/2025/02/05/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]